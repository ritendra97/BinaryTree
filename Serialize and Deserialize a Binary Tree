//Serialize and Deserialize a Binary Tree
import java.util.*;

import levelBinaryTree.Node;
class Node
{
	int data;
	Node left;
	Node right;
	Node (int data)
	{
		this.data=data;
	}
}
class Pair
{
	Node node;
	int state;
	Pair(Node node,int data)
	{
		this.node=node;
		this.state=data;
	}
}
public class BinaryTree 
{ 
	static Node root;
	
	public static  void serialize(Node root, ArrayList<Integer> A) {
	    if(root==null)
    	{
    		A.add(null);
    		return;
    	}
    	A.add(root.data);
    	serialize(root.left,A);
    	serialize(root.right,A);
	}
	static int index=0;
    public static Node deSerialize(ArrayList<Integer> A)
    {
        if(A.get(index)==null)
        {
            index++;
            return null;
        }
        Node new_node = new Node(A.get(index++));
        new_node.left = deSerialize(A);
        new_node.right = deSerialize(A);
        return new_node;
    }
    static void inorder(Node root)
    {
    	if(root==null)
    		return ;
    	inorder(root.left);
    	System.out.println(root.data+" ");
    	inorder(root.right);
    }
	public static void main(String[] args) 
	{
		Node root = new Node(12);
		root.left=new Node(5);
		root.right=new Node(7);
		root.left.left=new Node(3);
		root.right.right= new Node(1);
		ArrayList<Integer> A = new ArrayList<Integer>();
		serialize(root,A);
		Node ans = deSerialize(A);
		inorder(ans);
	}
}
