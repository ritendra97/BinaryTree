import java.util.*;

import BinaryTree.Node;
class Node
{
	int data;
	Node left;
	Node right;
	Node(int data)
	{
		this.data=data;
		this.left=null;
		this.right=null;
	}
}
public class BinaryTree 
{
	Node root;
	int tilt =0;
	public int tilttreeUtil(Node node)
	{
		if(node==null)
			return 0;
		int l = tilttreeUtil(node.left);
		int r = tilttreeUtil(node.right);
		int ltilt = Math.abs(l-r);
		tilt+=ltilt;
		int ts = l+r+node.data;
		return ts;
	}
	public int tilttree(Node node)
	{
		if(node ==null)
			return 0;
		return tilttreeUtil(node);
	}
	static void printLevelOrder(Node node)
	{
		 Queue<Node> queue = new LinkedList<Node>();
	     queue.add(node);
	     while (!queue.isEmpty()) 
	     {
	         Node tempNode = queue.poll();
	         System.out.print(tempNode.data + " ");
	         if (tempNode.left != null) 
	         {
	             queue.add(tempNode.left);
	         }
	         if (tempNode.right != null) 
	         {
	             queue.add(tempNode.right);
	         }
	     }
	}
	public static void main(String[] args) 
	{
		BinaryTree tree = new BinaryTree();
        tree.root = new Node(70);
        tree.root.left = new Node(10);
        tree.root.right = new Node(40);
        tree.root.left.right = new Node(20);
        tree.root.left.left = new Node(30);
        int i =tree.tilttree(tree.root);
        System.out.println(i);
       // tree.printLevelOrder(tree.root);
	}
}
