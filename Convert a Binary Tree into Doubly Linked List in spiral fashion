//Convert a Binary Tree into Doubly Linked List in spiral fashion
import java.util.*;
class Node { 
    int data; 
    Node left, right; 
  
    public Node(int item) 
    { 
        data = item; 
        left = right = null; 
    } 
} 
  
class BinaryTree { 
  
    static Node root; 
    static Node head=null;
    static Node tail=null;
    static void push(int data)
	{
		Node new_node=new Node(data);
		new_node.data=data;
		if(head==null)
		{
			head=new_node;
			head.right=null;
			head.left=null;
			tail=new_node;
		}
		else
		{
			new_node.left=tail;
			tail.right=new_node;
			tail=new_node;
		}
	}
    public static Node printSpiral(Node node) 
    { 
        if (node == null) 
            return null; 
        Stack<Node> s1 = new Stack<Node>();  
        Stack<Node> s2 = new Stack<Node>();  
        s1.push(node); 
        while (!s1.empty() || !s2.empty()) 
        { 
            while (!s1.empty()) 
            { 
                Node temp = s1.peek(); 
                s1.pop();
                push(temp.data);
                if (temp.right != null) 
                    s2.push(temp.right); 
  
                if (temp.left != null) 
                    s2.push(temp.left); 
            } 
            while (!s2.empty()) 
            { 
                Node temp = s2.peek(); 
                s2.pop();
                push(temp.data);
                if (temp.left != null) 
                    s1.push(temp.left); 
                if (temp.right != null) 
                    s1.push(temp.right); 
            } 
        } 
        return head;
    } 
    static void print(Node head)
	{
		Node temp=head;
		while(temp!=null)
		{
			System.out.println(temp.data + " ");
			temp=temp.right;
		}
	}
	public static void main(String[] args) 
	{
        root = new Node(1); 
        root.left = new Node(2); 
        root.right = new Node(3); 
        root.left.left = new Node(4); 
        root.left.right = new Node(5); 
        root.right.left = new Node(6); 
        root.right.right = new Node(7); 
        root.left.left.left = new Node(8); 
        root.left.left.right = new Node(9); 
        root.left.right.left = new Node(10); 
        root.left.right.right = new Node(11);  
        root.right.left.right = new Node(13); 
        root.right.right.left = new Node(14);
        Node ans = printSpiral(root);
        print(ans);
	}
}
