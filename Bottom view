import java.util.*;

class Node {
	int data;
	Node left;
	Node right;

	Node(int data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}

class Pair {
	Node d;
	int address;

	Pair(Node d, int address) {
		this.d = d;
		this.address = address;
	}
}

public class Practice {

	static Node root;
	static TreeMap<Integer, Node> map = new TreeMap<>();

	public static void diagonalSum(Node root) {

		Queue<Pair> q = new LinkedList<>();

		q.add(new Pair(root, 0));
		while (!q.isEmpty()) {

			Pair temp = q.remove();
			map.put(temp.address, temp.d);

			if (temp.d.left != null) {
				q.add(new Pair(temp.d.left, temp.address - 1));
			}

			if (temp.d.right != null) {
				q.add(new Pair(temp.d.right, temp.address + 1));
			}

		}

		for (Integer a : map.keySet()) {
			System.out.print(map.get(a).data+" ");
		}
	}

	public static void main(String[] args) {
		Node root = new Node(20);
		root.left = new Node(8);
		root.right = new Node(22);
		root.left.left = new Node(5);
		root.left.right = new Node(3);
		root.right.left = new Node(4);
		root.right.right = new Node(25);
		root.left.right.left = new Node(10);
		root.left.right.right = new Node(14);
		diagonalSum(root);
	}
}
