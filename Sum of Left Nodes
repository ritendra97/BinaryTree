// Java program to find sum of all left leaves
class Node
{
	int data;
	Node left, right;

	Node(int item) {
		data = item;
		left = right = null;
	}
}

// Passing sum as accumulator and implementing pass by reference
// of sum variable
class Sum
{
	int sum = 0;
}

class BinaryTree
{
	Node root;

	/* Pass in a sum variable as an accumulator */
	void leftLeavesSumRec(Node node, boolean isleft, Sum summ)
	{
		if (node == null)
			return;

		// Check whether this node is a leaf node and is left.
		if (node.left == null && node.right == null && isleft)
			summ.sum = summ.sum + node.data;

		// Pass true for left and false for right
		leftLeavesSumRec(node.left, true, summ);
		leftLeavesSumRec(node.right, false, summ);
	}

	// A wrapper over above recursive function
	int leftLeavesSum(Node node)
	{
		Sum suum = new Sum();
		
		// use the above recursive function to evaluate sum
		leftLeavesSumRec(node, false, suum);

		return suum.sum;
	}

	// Driver program
	public static void main(String args[])
	{
		BinaryTree tree = new BinaryTree();
		tree.root = new Node(20);
		tree.root.left = new Node(9);
		tree.root.right = new Node(49);
		tree.root.left.right = new Node(12);
		tree.root.left.left = new Node(5);
		tree.root.right.left = new Node(23);
		tree.root.right.right = new Node(52);
		tree.root.left.right.right = new Node(12);
		tree.root.right.right.left = new Node(50);

		System.out.println("The sum of leaves is " +
									tree.leftLeavesSum(tree.root));
	}
}

// This code is contributed by Mayank Jaiswal
