import java.util.*;
class TreeNode
{
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right)
    {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}
public class BinaryTree 
{
	static Queue<TreeNode> q = new LinkedList<TreeNode>();
	public static int burntreeUtil(TreeNode node, int target)
	{
		if(node==null)
			return 0;
		
		if(node.val==target)
		{
			System.out.println(node.val);
			if(node.left!=null)
				q.add(node.left);
			if(node.right!=null)
				q.add(node.right);
			
			return 1;
		}
		int a = burntree(node.left,target);
		if(a==1)
		{
			int size = q.size();
			while(size>0)
			{
				TreeNode n = q.remove();
				System.out.println(n.val);
				if(n.left!=null)
					q.add(n.left);
				if(n.right!=null)
					q.add(n.right);
				size--;
			}
			if(node.right!=null)
			{
				q.add(node.right);
			}
			System.out.println(node.val);
			return 1;
		}
		int b = burntree(node.right,target);
		if(b==1)
		{
			int size = q.size();
			while(size>0)
			{
				TreeNode n = q.remove();
				System.out.println(n.val);
				if(n.left!=null)
					q.add(n.left);
				if(n.right!=null)
					q.add(n.right);
				size--;
			}
			if(node.left!=null)
			{
				q.add(node.left);
			}
			System.out.println(node.val);
			return 1;
		}
		return 0;
	}
	public static int burntree(TreeNode node, int target)
	{
    	return burntreeUtil(node,target);	
	}
	public static void main(String[] args) 
	{
		 TreeNode root = new TreeNode(12);
	     root.left = new TreeNode(13);
	     root.right = new TreeNode(10);
	     root.right.left = new TreeNode(14);
	     root.right.right = new TreeNode(15);
	     TreeNode left = root.right.left;
	     TreeNode right = root.right.right;
	     left.left = new TreeNode(21);
	     left.right = new TreeNode(24);
	     right.left = new TreeNode(22);
	     right.right = new TreeNode(23);
	     
	     burntree(root,14);
	     while(!q.isEmpty())
		 {
			TreeNode n = q.remove();
			System.out.println(n.val);		
		}
	}
}
