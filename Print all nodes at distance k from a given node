//Print all nodes at distance k from a given node
import java.util.*;
class Node
{
	int data;
	Node left;
	Node right;
	Node(int data)
	{
		this.data=data;
		this.left=null;
		this.right=null;
	}
}
public class BinaryTree 
{
	static Node root;
	static boolean findPathutil(Node root, ArrayList<Node> ans, int data)
	{
		if(root == null)
			return false;
		if(root.data == data)
		{
			ans.add(root);
			return true;
		}
		boolean l = findPathutil(root.left,ans,data);
		if(l)
		{
			ans.add(root);
			return true;
		}
		boolean r = findPathutil(root.right,ans,data);
		if(r)
		{
			ans.add(root);
			return true;
		}
		return false;
	}
	static void printklevel(Node node,int k,Node blocker)
	{
		if(node==null || k<0 || node==blocker)
			return;
		if(k==0)
			System.out.println(node.data);
		printklevel(node.left,k-1,blocker);
		printklevel(node.right,k-1,blocker);
	}
	static void printKlevelFar(Node node,int data,int k)
	{
		ArrayList<Node> path = new ArrayList<>();
		
		findPathutil(node,path,data);
//		Iterator<Node> iter = path.iterator();
//		while(iter.hasNext())
//		{
//			System.out.print(" this "+iter.next().data+" ");
//		}
		for(int i=0;i<path.size();i++)
		{
			printklevel(path.get(i),k-i, i==0?null:path.get(i-1));
		}
	}
	public static void main(String[] args) 
	{
		root = new Node(20); 
        root.left = new Node(8); 
        root.right = new Node(22); 
        root.left.left = new Node(4); 
        root.left.right = new Node(12); 
        root.left.right.left = new Node(10); 
        root.left.right.right = new Node(14);
        printKlevelFar(root,root.left.right.data,2);
	}
}
