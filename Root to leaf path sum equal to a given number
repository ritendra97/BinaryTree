//Root to leaf path sum equal to a given number please have a look in second below code
class Node
{
	int data;
	Node left;
	Node right;
	Node(int data)
	{
		this.data=data;
		this.left=null;
		this.right=null;
	}
}
public class BinaryTree 
{
	static Node root;
	public static void haspathsumutil(Node node,int sum,String psf,int target)
	{
		if(node==null)
			return;
		else if((node.left == null &&node.right==null))
		{
			target=target+node.data;
			if(target==sum)
			{
				System.out.println(psf+node.data);
			}
			return;
		}
		haspathsumutil(node.left,sum,psf+node.data+" ",target+node.data);
		haspathsumutil(node.right,sum,psf+node.data+" ",target+node.data);
	}
	public static void haspathsum(Node root,int sum)
	{
		haspathsumutil(root,sum,"",0);
	}
	public static void main(String[] args)
	{
		root = new Node(13);
		root.left = new Node(12);
		root.right = new Node(10);
		root.left.left = new Node(4);
		root.left.right = new Node(19);
		root.right.left = new Node(2);
		root.right.right = new Node(9);
		int path[]= new int[1000];
		haspathsum(root,25);
	}

}

import java.net.http.HttpResponse.PushPromiseHandler;
import java.util.Stack;

import apple.laf.JRSUIUtils.Tree;

class TreeNode{
    TreeNode left;
    TreeNode right;
    int val;
    TreeNode(int val){
        this.val = val;
        this.left = null;
        this.right = null;
    }
}

public class BinaryTree{    

    public static boolean hasPath(TreeNode root, int data){
        
        if(root==null) return false; 
        
        if(root.left==null && root.right==null)
        {
            data =  data-root.val;
            if(data==0) return true;
        }else{
            data =  data-root.val;
        }
        
        return hasPath(root.left, data)||
        hasPath(root.right, data);
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(10);
        root.left = new TreeNode(8);
        root.right = new TreeNode(2);
        root.left.left = new TreeNode(3);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(2);
        System.out.println(hasPath(root, 3));
    }
}
