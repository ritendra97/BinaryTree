//Flip BinaryTree
import java.util.*;
class Node
{
	int data;
	Node left;
	Node right;
	Node(int data)
	{
		this.data=data;
		this.left=null;
		this.right=null;
	}
}
public class BinaryTree 
{
	static Node flipBinaryTree(Node root) 
	{
		Node curr=root;
		Node next=null;
		Node temp=null;
		Node prev=null;
		while(curr!=null)
		{
			next = curr.left;
			curr.left=temp;
			temp=curr.right;
			curr.right=prev;
			prev=curr;
			curr=next;
		}
		return prev;
	}
	static void printLevelOrder(Node node)
	{
		 Queue<Node> queue = new LinkedList<Node>();
	     queue.add(node);
	     while (!queue.isEmpty()) 
	     {
	         Node tempNode = queue.poll();
	         System.out.print(tempNode.data + " ");
	         if (tempNode.left != null) 
	         {
	             queue.add(tempNode.left);
	         }
	         if (tempNode.right != null) 
	         {
	             queue.add(tempNode.right);
	         }
	     }
	}
	public static void main(String[] args) 
	{
		 Node root = new Node(1); 
		    root.left = new Node(2); 
		    root.right = new Node(3); 
		    root.right.left = new Node(4); 
		    root.right.right = new Node(5); 
		 
		    System.out.print("Level order traversal " + 
		                            "of given tree\n"); 
		    printLevelOrder(root); 
		 
		    root = flipBinaryTree(root); 
		 
		    System.out.print("\nLevel order traversal " + 
		                        "of the flipped tree\n"); 
		    printLevelOrder(root); 
	}
}
