//Find all possible binary trees with given Inorder Traversal

import java.util.*;
class Node {
    int data;
    Node left, right;
  
    public Node(int item) {
        data = item;
        left = null;
        right = null;
    }
}
public class BinaryTreeProblem {

	public static void preOrder(Node node) {
        if (node != null) {
            System.out.print(node.data + " "    );
            preOrder(node.left);
            preOrder(node.right);
        }
    }
	
	public static Vector<Node> getTrees(int arr[], int start, int end) {
		
		Vector<Node> trees = new Vector<Node>();
		
		if(start>end) {
			trees.add(null);
			return trees;
		}
		
		 for (int i = start; i <= end; i++) {
	       
			 Vector<Node> ltrees = getTrees(arr, start, i - 1); 
	         Vector<Node> rtrees = getTrees(arr, i + 1, end);
	  
	         for (int j = 0; j < ltrees.size(); j++) {
	        	 
	                for (int k = 0; k < rtrees.size(); k++) {
	  
	                	Node node = new Node(arr[i]);
	  
	                	node.left = ltrees.get(j);
	                	node.right = rtrees.get(k);
	  
	                    trees.add(node);
	                }
	            }
	        }
	        return trees;
	}
	public static void main(String[] args) {
	
		int arr[] = {4,5,7};
		Vector<Node> trees = getTrees(arr, 0, arr.length-1);
		for (int i = 0; i < trees.size(); i++) {
            preOrder(trees.get(i));
            System.out.println("");
        }
	}

}
