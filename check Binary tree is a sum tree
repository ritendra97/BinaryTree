//check Binary tree is a sum tree

class Node
{
	int data;
	Node left;
	Node right;
	Node(int data)
	{
		this.data=data;
		this.left=null;
		this.right=null;
	}
}
public class BinaryTree 
{
	Node root;
	/*
	int sum(Node node)
	{
		if(node==null)
			return 0;
		int l_sum = sum(node.left);
		int r_sum = sum(node.right);
		int t_sum = l_sum+r_sum+node.data;
		return t_sum;
	}
	boolean isSumTree(Node root)
	{
		if(root == null || (root.left == null && root.right == null))
        {
            return true;
        }
		int sum1 = sum(root.left);
		int sum2 = sum(root.right);
		if(sum1+sum2==root.data && isSumTree(root.left)==true && isSumTree(root.right)==true)
			return true;
		return false;
	}*/
	//below O(n) approach
	boolean flag = true;
	int isSumTreeUtil(Node root)
	{
		if(root==null)
			return 0;
		if(root.left==null && root.right==null)
			return root.data;
		int l_s = isSumTreeUtil(root.left);
		int r_s = isSumTreeUtil(root.right);
		if(root.data!=l_s+r_s)
		{
			flag=false;
		}
		return l_s+r_s+root.data;
	}
	boolean isSumTree(Node root)
	{
		isSumTreeUtil(root);
		if(flag)
			return true;
		else 
			return false;
	}
	public static void main(String[] args) 
	{
		BinaryTree tree = new BinaryTree();
        tree.root = new Node(80);
        tree.root.left = new Node(20);
        tree.root.right = new Node(40);
        tree.root.left.left = new Node(10);
        tree.root.left.right = new Node(10);
        System.out.println(tree.isSumTree(tree.root));
	}
}

import java.util.*;
import java.util.Map.Entry;
//Transform to Sum Tree
class Node{
	
	int val;
	Node left;
	Node right;
	
	Node(int val){
	
		this.val = val;
		this.left = null;
		this.right = null;	
	}
	Node(){};
}
public class Solution {

	public static int issumtree(Node root) {
		
		if(root==null) {
			return 0;
		}
		if(root.left==null && root.right==null) {
			return root.val;
		}
		
		int l = issumtree(root.left);
		int r = issumtree(root.right);
		
		int ts = l+r;
		if(root.val == l+r) {
			return l+r+root.val;
		}
		return Integer.MAX_VALUE;
	}
	
	public static void printInorder(Node node) {
		
        if (node == null)
            return;
 
        printInorder(node.left);
 
        System.out.print(node.val + " ");
 
        printInorder(node.right);
    }
    public static void main(String[] args) {
    
    	Node root = new Node(44);
        root.left = new Node(9);
        root.right = new Node(13);
        root.left.left = new Node(4);
        root.left.right = new Node(5);
        root.right.left = new Node(6);
        root.right.right = new Node(7);
        
    	Node root2 = new Node(1);
    	root2.left = new Node(2);
    	root2.right = new Node(3);
    	root2.left.left = new Node(4);
    	root2.left.right = new Node(5);
    	
    	int ans = issumtree(root);
    	
    	if(ans!=Integer.MAX_VALUE) {
    		System.out.println("This is sumTree");
    	}else {
    		System.out.println("This is not sumTree");
    	}
    	
	}
}
