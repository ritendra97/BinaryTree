//Construct a Binary Tree from Postorder and Inorder this below solution is O(n) solution
import java.util.*;
class Node
{
	int data;
	Node left;
	Node right;
	Node(int data)
	{
		this.data=data;
		this.left=null;
		this.right=null;
	}
}
class index
{
	int index;
}
public class BinaryTree 
{
	static HashMap<Integer,Integer> map = new HashMap<>();
	static Node constructbinary(int[] in,int post[],int start,int end)
	{
	   index postindex = new index();
	   postindex.index = post.length-1;
       for(int i=0;i<post.length;i++)
       {
    	   map.put(in[i],i);
       }
       return constructbinaryutil(in,post,start,end,postindex);
	}
	static  Node constructbinaryutil(int[] in, int[] pre, int inStrt, int inEnd,index postindex)
	{
		if(inStrt>inEnd)
			return null;
		Node root = new Node(pre[postindex.index--]);
		int index = map.get(pre[postindex.index+1]);
		if(inStrt==inEnd)
			return root;
		root.right=constructbinaryutil(in,pre,index+1,inEnd,postindex);
		root.left=constructbinaryutil(in,pre,inStrt,index-1,postindex);
		return root;
	}
	
	static void inorder(Node temp)
    {
        if (temp == null)
            return;
        inorder(temp.left);
        System.out.print(temp.data + " ");
        inorder(temp.right);
    }
	public static void main(String[] args) 
	{
		int in[] = {4, 8, 2, 5, 1, 6, 3, 7};
		int post[] = {8, 4, 5, 2, 6, 7, 3, 1};
		Node root = constructbinary(in,post,0,post.length-1);
		inorder(root);
	}
}
