//Construct Tree from given Inorder and Preorder traversals
import java.util.*;
class Node
{
	int data;
	Node left;
	Node right;
	Node(int data)
	{
		this.data=data;
		this.left=null;
		this.right=null;
	}
}
public class BinaryTree 
{
	static int preindex=0;
	static  Node constructbinary(int[] in, int[] pre, int inStrt, int inEnd)
	{
		if(inStrt>inEnd)
			return null;
		Node root = new Node(pre[preindex++]);
		int index = search(in,inStrt,inEnd,root.data);
		if(inStrt==inEnd)
			return root;
		root.left=constructbinary(in,pre,inStrt,index-1);
		root.right=constructbinary(in,pre,index+1,inEnd);
		return root;
	}
	static int search(int[] in,int start,int end,int data)
	{
		int i;
	    for (i=start; i<=end; i++) 
	       if (in[i]==data) 
	          return i;            
	    return i;
	}
	static void inorder(Node temp)
    {
        if (temp == null)
            return;
        inorder(temp.left);
        System.out.print(temp.data + " ");
        inorder(temp.right);
    }
	public static void main(String[] args) 
	{
		int in[] = {4, 2, 5, 1, 3, 6};
		int pre[] = {1, 2, 4, 5, 3, 6};
		Node root = constructbinary(in,pre,0,pre.length-1);
		inorder(root);
	}
}
