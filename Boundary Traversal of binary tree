//Boundary Traversal of binary tree
import java.util.*;
class Node
{
	int data;
	Node left;
	Node right;
	Node(int data)
	{
		this.data=data;
		this.left=null;
		this.right=null;
	}
}
public class BinaryTree 
{
	static Node root;
	static ArrayList<Integer> ans = new ArrayList<Integer>();
	public static void printboundrytraversal(Node node)
	{
		if(node!=null)
		{
			printleft(node);
			printleaves(node);
			printright(node.right);
		}
	}
	public static void printleft(Node node)
	{
		if(node==null)
			return;
		if(node.left!=null)
		{
			System.out.print(node.data+" ");
			printleft(node.left);
		}
		else if(node.right!=null)
		{
			System.out.print(node.data+" ");
			printleft(node.right);
		}
	}
	public static void printright(Node node)
	{
		if(node==null)
			return;
		if(node.right!=null)
		{
			printright(node.right);
			System.out.print(node.data+" ");
		}
		else if(node.left!=null)
		{
			printright(node.left);
			System.out.print(node.data+" ");	
		}
		
	}
	public static void printleaves(Node node)
	{
		if(node==null)
			return;
		printleaves(node.left);
		if(node.left==null && node.right==null)
			System.out.print(node.data+" ");
		printleaves(node.right);
	}
	public static void main(String[] args) 
	{
		root = new Node(8);
        root.left = new Node(3);
        root.right = new Node(10);
        root.left.left = new Node(1);
        root.left.right = new Node(6);
        root.right.right = new Node(14);
        root.right.right.left = new Node(13);
        root.left.right.left = new Node(4);
        root.left.right.right = new Node(7);
        printboundrytraversal(root);
	}
}
